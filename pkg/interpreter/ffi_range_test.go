package interpreter

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestFFIRangeNewRange(t *testing.T) {
	for _, ts := range []struct {
		start    int
		stop     int
		step     int
		expected []int
	}{
		/**
		for start, stop, step in [
		(0,   0,    1),
		(0,   10,   1),
		(10,  0,    1),
		(10,  10,   1),
		(0,   0,    1),
		(0,   -10,  1),
		(10,  0,    1),
		(10,  -10,  1),
		(0,   0,    1),
		(0,   10,   1),
		(-10, 0,    1),
		(-10, 10,   1),
		(0,   0,    1),
		(0,   -10,  1),
		(-10, 0,    1),
		(-10, -10,  1),
		(0,   0,    3),
		(0,   10,   3),
		(10,  0,    3),
		(10,  10,   3),
		(0,   0,    3),
		(0,   -10,  3),
		(10,  0,    3),
		(10,  -10,  3),
		(0,   0,    3),
		(0,   10,   3),
		(-10, 0,    3),
		(-10, 10,   3),
		(0,   0,    3),
		(0,   -10,  3),
		(-10, 0,    3),
		(-10, -10,  3),
		(0,   0,   -1),
		(0,   10,  -1),
		(10,  0,   -1),
		(10,  10,  -1),
		(0,   0,   -1),
		(0,   -10, -1),
		(10,  0,   -1),
		(10,  -10, -1),
		(0,   0,   -1),
		(0,   10,  -1),
		(-10, 0,   -1),
		(-10, 10,  -1),
		(0,   0,   -1),
		(0,   -10, -1),
		(-10, 0,   -1),
		(-10, -10, -1),
		(0,   0,   -3),
		(0,   10,  -3),
		(10,  0,   -3),
		(10,  10,  -3),
		(0,   0,   -3),
		(0,   -10, -3),
		(10,  0,   -3),
		(10,  -10, -3),
		(0,   0,   -3),
		(0,   10,  -3),
		(-10, 0,   -3),
		(-10, 10,  -3),
		(0,   0,   -3),
		(0,   -10, -3),
		(-10, 0,   -3),
		(-10, -10, -3),
		]: print(f'{{{start}, {stop}, {step}, []int{str(list(range(start, stop, step))).replace("[", "{").replace("]", "}")}}},')
		*/
		{0, 0, 1, []int{}},
		{0, 10, 1, []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{10, 0, 1, []int{}},
		{10, 10, 1, []int{}},
		{0, 0, 1, []int{}},
		{0, -10, 1, []int{}},
		{10, 0, 1, []int{}},
		{10, -10, 1, []int{}},
		{0, 0, 1, []int{}},
		{0, 10, 1, []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{-10, 0, 1, []int{-10, -9, -8, -7, -6, -5, -4, -3, -2, -1}},
		{-10, 10, 1, []int{-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{0, 0, 1, []int{}},
		{0, -10, 1, []int{}},
		{-10, 0, 1, []int{-10, -9, -8, -7, -6, -5, -4, -3, -2, -1}},
		{-10, -10, 1, []int{}},
		{0, 0, 3, []int{}},
		{0, 10, 3, []int{0, 3, 6, 9}},
		{10, 0, 3, []int{}},
		{10, 10, 3, []int{}},
		{0, 0, 3, []int{}},
		{0, -10, 3, []int{}},
		{10, 0, 3, []int{}},
		{10, -10, 3, []int{}},
		{0, 0, 3, []int{}},
		{0, 10, 3, []int{0, 3, 6, 9}},
		{-10, 0, 3, []int{-10, -7, -4, -1}},
		{-10, 10, 3, []int{-10, -7, -4, -1, 2, 5, 8}},
		{0, 0, 3, []int{}},
		{0, -10, 3, []int{}},
		{-10, 0, 3, []int{-10, -7, -4, -1}},
		{-10, -10, 3, []int{}},
		{0, 0, -1, []int{}},
		{0, 10, -1, []int{}},
		{10, 0, -1, []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
		{10, 10, -1, []int{}},
		{0, 0, -1, []int{}},
		{0, -10, -1, []int{0, -1, -2, -3, -4, -5, -6, -7, -8, -9}},
		{10, 0, -1, []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}},
		{10, -10, -1, []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9}},
		{0, 0, -1, []int{}},
		{0, 10, -1, []int{}},
		{-10, 0, -1, []int{}},
		{-10, 10, -1, []int{}},
		{0, 0, -1, []int{}},
		{0, -10, -1, []int{0, -1, -2, -3, -4, -5, -6, -7, -8, -9}},
		{-10, 0, -1, []int{}},
		{-10, -10, -1, []int{}},
		{0, 0, -3, []int{}},
		{0, 10, -3, []int{}},
		{10, 0, -3, []int{10, 7, 4, 1}},
		{10, 10, -3, []int{}},
		{0, 0, -3, []int{}},
		{0, -10, -3, []int{0, -3, -6, -9}},
		{10, 0, -3, []int{10, 7, 4, 1}},
		{10, -10, -3, []int{10, 7, 4, 1, -2, -5, -8}},
		{0, 0, -3, []int{}},
		{0, 10, -3, []int{}},
		{-10, 0, -3, []int{}},
		{-10, 10, -3, []int{}},
		{0, 0, -3, []int{}},
		{0, -10, -3, []int{0, -3, -6, -9}},
		{-10, 0, -3, []int{}},
		{-10, -10, -3, []int{}}} {
		t.Run(fmt.Sprintf("%d/%d/%d", ts.start, ts.stop, ts.step), func(t *testing.T) {
			rng, err := FFIRange{}.newRange(ts.start, ts.stop, ts.step)
			require.NoError(t, err)
			is := []int{}
			for _, o := range rng.(*ObjectList).Items {
				is = append(is, o.(*ObjectInt).Value)
			}
			assert.Equal(t, ts.expected, is)
		})
	}
}
